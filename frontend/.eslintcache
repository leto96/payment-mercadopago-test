[{"/home/leto/Programming/Node/Projects/paymenttest/client/src/App.js":"1","/home/leto/Programming/Node/Projects/paymenttest/client/src/reportWebVitals.js":"2","/home/leto/Programming/Node/Projects/paymenttest/client/src/index.js":"3","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Form/Form.js":"4","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Button/Button.js":"5","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Input/Input.js":"6","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/ResponseMessage/ResponseMessage.js":"7","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Spinner/Spinner.js":"8","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/SuccessShow/SuccessShow.js":"9"},{"size":1076,"mtime":1609327781029,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1608591529980,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1608591529980,"results":"13","hashOfConfig":"11"},{"size":11100,"mtime":1609893077284,"results":"14","hashOfConfig":"11"},{"size":306,"mtime":1609893077284,"results":"15","hashOfConfig":"11"},{"size":1573,"mtime":1609840869018,"results":"16","hashOfConfig":"11"},{"size":364,"mtime":1609327988128,"results":"17","hashOfConfig":"11"},{"size":130,"mtime":1609091131059,"results":"18","hashOfConfig":"11"},{"size":506,"mtime":1609893077420,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"g1mar3",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},"/home/leto/Programming/Node/Projects/paymenttest/client/src/App.js",[],["46","47"],"/home/leto/Programming/Node/Projects/paymenttest/client/src/reportWebVitals.js",[],["48","49"],"/home/leto/Programming/Node/Projects/paymenttest/client/src/index.js",[],["50","51"],"/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Form/Form.js",["52","53"],"import React, { useEffect, useState } from 'react';\nimport postscribe from 'postscribe';\nimport axios from 'axios';\nimport Input from '../Input/Input';\nimport Button from '../Button/Button';\nimport Spinner from  '../Spinner/Spinner';\nimport styles from './Form.module.css';\n\nconst initialState = [\n  {\n    value : '',\n    name:'email',\n    labelName:'Email',\n    isSensible:false,\n    id:'email',\n    type:'email',\n    placeholder:'myEmail@email.com'\n  },\n  {\n    value : '',\n    name:'docType',\n    labelName:'Tipo de documento',\n    isSensible:false,\n    id:'docType',\n    type:'select',\n    dataCheckout:'docType',\n    options: [{id: 'none', text: 'Selecione um documento'}]\n  },\n  {\n    value : '',\n    name:'docNumber',\n    labelName:'Número do documento',\n    isSensible:false,\n    id:'docNumber',\n    type:'text',\n    dataCheckout:'docNumber',\n    placeholder:'CPF'\n  },\n  {\n    value : '',\n    labelName:'Vencimento - mês',\n    isSensible:true,\n    id:'cardExpirationMonth',\n    type:'text',\n    dataCheckout:'cardExpirationMonth',\n    placeholder:'MM'\n  },\n  {\n    value : '',\n    labelName:'Vencimento - ano',\n    isSensible:true,\n    id:'cardExpirationYear',\n    type:'text',\n    dataCheckout:'cardExpirationYear',\n    placeholder:'YY'\n  },\n  {\n    value : '',\n    labelName:'Número do cartão',\n    isSensible:true,\n    id:'cardNumber',\n    type:'text',\n    dataCheckout:'cardNumber',\n    placeholder:'00000000000000'\n  },\n  {\n    value : '',\n    labelName:'Código de segurança',\n    isSensible:true,\n    id:'securityCode',\n    type:'text',\n    dataCheckout:'securityCode',\n    placeholder:'CVV'\n  },\n  {\n    value : '',\n    labelName:'Banco emissor',\n    isSensible:true,\n    id:'issuer',\n    type:'select',\n    dataCheckout:'issuer'\n  },\n  {\n    value : '',\n    name:'installments',\n    labelName:'Parcelas',\n    isSensible:false,\n    id:'installments',\n    type:'select'\n  },\n  {\n    value : '80',\n    name:'transactionAmount',\n    isSensible:false,\n    id:'transactionAmount',\n    type:'text',\n    hidden:true\n  },\n  {\n    value : '',\n    name:'paymentMethodId',\n    isSensible:false,\n    id:'paymentMethodId',\n    type:'text',\n    hidden:true,\n    invalidMessage: ''\n  },\n  {\n    value : '',\n    name:'description',\n    isSensible:false,\n    id:'description',\n    type:'text',\n    hidden:true\n  },\n  {\n    value : '',\n    isSensible:false,\n    labelName:'Titular do cartão',\n    id:'cardholderName',\n    dataCheckout:'cardholderName',\n    type:'text',\n    placeholder:'FULLNAME'\n  }\n];\n\nconst Form = (props) => {\n  const [formData, setFormData] = useState(initialState);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const [changedForm, setChangedForm] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n\n  const updateStateFormData = (key, field, value) => {\n    const newFormState = [...formData];\n    newFormState[key][field] = value;\n    setFormData(newFormState);\n  }\n\n  const findIndexKeyById = (id) => {\n    return formData.map(data => data.id).indexOf(id)\n  }\n\n  const setCardToken = (status, response) => {\n    if (status === 200 || status === 201) {\n      setFormData([...formData, \n        {\n          id:'token',\n          type:'text',\n          hidden:true,\n          value: response.id,\n          name:'token'\n        }]);\n      setFormSubmitted(true);\n    }\n    // console.log(status);\n    // console.log(response);\n  }\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if(!formSubmitted){\n      // To do validation\n      let $form = document.getElementById('paymentForm');\n      setLoading(true);\n\n      if(changedForm){\n        window.Mercadopago.createToken($form, setCardToken.bind(this));\n      }\n    }\n  }\n\n  const getInstallments = (paymentMethodId, transactionAmount, issuerId) => {\n    window.Mercadopago.getInstallments({\n      \"payment_method_id\": paymentMethodId,\n      \"amount\": parseFloat(transactionAmount),\n      \"issuer_id\": parseInt(issuerId)\n    }, setInstallments.bind(this));\n  }\n \n  function setInstallments(status, response){\n    let key = findIndexKeyById('installments');\n    if (status === 200) {\n      cleanInvalidMessage('installments'); // clean error message\n      let options = response[0].payer_costs.map( installments => (\n        {\n          text: installments.recommended_message,\n          value: installments.installments\n        }));\n\n      updateStateFormData(key, 'options', options);\n      updateStateFormData(key, 'value', String(response[0].payer_costs[0].installments));\n\n    } else {\n      updateStateFormData(key, 'invalidMessage', response.message);\n    }\n  }\n\n  const getIssuers = (paymentMethodId) => {\n    window.Mercadopago.getIssuers(\n      paymentMethodId,\n      setIssuers.bind(this)\n    );\n  }\n\n  const setIssuers = (status, response) => {\n    let key = findIndexKeyById('issuer');\n    if (status === 200) {\n      cleanInvalidMessage('issuer'); // clean error message\n      let options = response.map( issuer => (        \n      {\n        text: issuer.name,\n        value: issuer.id\n      }));\n      updateStateFormData(key, 'options', options);\n      updateStateFormData(key, 'value', String( response[0].id ));\n\n      let auxPaymentMethodId;\n      let auxTransactionAmount;\n      formData.map( (val) => {\n        if(val.id === 'paymentMethodId') auxPaymentMethodId = val.value;\n        if(val.id === 'transactionAmount') auxTransactionAmount = val.value;\n        return null;\n      });\n\n      getInstallments(\n        auxPaymentMethodId,\n        auxTransactionAmount,\n        formData[key].value\n      );\n    } else {\n      updateStateFormData(key, 'invalidMessage', response.message);\n    }\n  }\n\n  const setPaymentMethod = (status, response) => {\n    let key = findIndexKeyById('paymentMethodId');\n    if (status === 200) {\n      let paymentMethod = response[0];\n      // 10 is the paymentmethod object in array it is hardcoded for now, but it needs to be changed to\n      // an more elegant solution\n      updateStateFormData(key, 'value', paymentMethod.id);\n      getIssuers(paymentMethod.id);\n    } else {\n      // Something went wrong, the problem is from the card number\n      key = findIndexKeyById('cardNumber');\n      updateStateFormData(key, 'invalidMessage', 'Invalid card');\n    }\n  }\n\n  const enableButton = () => {\n    // Fields check to enable\n    const fieldsId = ['email', 'docType', 'docNumber', 'cardExpirationMonth', 'cardExpirationYear', \n      'cardNumber', 'securityCode', 'issuer', 'installments', 'cardholderName'];\n\n    // Comparar com todos os fields\n    return formData.reduce( (avaliation, currentValue) => {\n      let result = avaliation;\n      let findResult = fieldsId.find(element => element === currentValue.id)\n      if(findResult === undefined){\n        result = result && true\n      }else{\n        if(currentValue.value !== '')\n          result = result && true;\n        else{\n          result = result && false;\n        }\n      }\n      return result;\n    }, true);\n  }\n\n  const onChangeHandler = (key, e) => {\n    let eventValue = e.target.value;\n    let value = maskValues(formData[key].id, eventValue); //Masked Value\n    if(formData[key]['dataCheckout'] && formData[key]['dataCheckout'] === 'cardNumber'){\n      cleanInvalidMessage('cardNumber');\n      if (value.length >= 6) {\n        let bin = value.substring(0,6);\n        window.Mercadopago.getPaymentMethod({\n            \"bin\": bin\n        }, setPaymentMethod.bind(this));\n      }\n    }\n\n    setChangedForm(true);\n    updateStateFormData(key, 'value', value);\n    \n    enableButton() ? setButtonDisabled(false) : setButtonDisabled(true)\n  }\n\n  const setReadyDocTypes = () => {\n    // Helper: catch calls from MercadoPago, and identify update data from doc types\n    var proxied = window.XMLHttpRequest.prototype.send;\n    window.XMLHttpRequest.prototype.send = function() {\n      // Proxy the call\n      var pointer = this;\n      var intervalId = window.setInterval(function(){\n        var urlLikeLookingFor = \"https://api.mercadopago.com/v1/identification_types\";\n          if(pointer.readyState !== 4){\n            return; // wait until be ready\n          }\n          if( pointer.responseURL.substr(0, 51) === urlLikeLookingFor){\n            // The response is from the docTypes \"get\"\n            const parsedResponse = JSON.parse(pointer.response);\n            let options = parsedResponse.map( docType => (\n              {\n                text: docType.name,\n                value: docType.id\n              }));\n\n            let key = findIndexKeyById('docType');\n            updateStateFormData(key, 'value', options[0].value);\n          }\n          \n          clearInterval(intervalId);\n\n      }, 1);\n      return proxied.apply(this, [].slice.call(arguments));\n    };\n    window.Mercadopago.getIdentificationTypes();\n  }\n\n  const cleanInvalidMessage = (field) => {\n    let key = findIndexKeyById(field);\n    updateStateFormData(key, 'invalidMessage', '');\n  }\n\n  // Load mercadopago Script to use as said in documentation (https://www.mercadopago.com.br/developers/pt/guides/online-payments/checkout-api/receiving-payment-by-card/)\n  useEffect(() => {\n    postscribe('#root', '<script id=\"mercadoPagoScript\" src=\"https://secure.mlstatic.com/sdk/javascript/v1/mercadopago.js\"></script>')\n\n    const mercadoPagoScript = document.getElementById('mercadoPagoScript');\n    mercadoPagoScript.addEventListener('load', () => {\n      window.Mercadopago.setPublishableKey(\"TEST-bd5383a9-43a9-494b-a54d-4bcfb4824fd3\");\n      setReadyDocTypes();\n    });\n  }, []);\n\n  useEffect( () => {\n    if(formSubmitted){\n      const formatedPostData = formatDataToPost(formData);\n\n      axios({\n        url: '/api/payment',\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        data: formatedPostData\n      })\n      .then(res => {\n        props.onResponseHandler(res.data);\n\n      })\n      .catch(e => {\n        props.onResponseHandler(e.response.data);\n      })\n      .finally(() => {\n        setLoading(false);\n      })\n    }\n  }, [formSubmitted]);\n\n  const formatDataToPost = () => {\n    const filteredFormData = formData.filter( (data) => {\n      return !!data.name\n    });\n\n    const formatedData = {};\n    filteredFormData.forEach( (data) => {\n      formatedData[data.name] = data.value;\n    });\n    return formatedData;\n  }\n\n  return (\n    <form id='paymentForm' className={styles.Form}>\n      { formData.map( (inp, index) => <Input\n        {...inp}\n        index={index}\n        key={index}\n        onChange={(index, e) => onChangeHandler(index, e)}\n        />\n      )}\n      \n      { loading ? <Spinner /> : <Button disabeld={buttonDisabled} onSubmitHandler={onSubmitHandler} value={'Comprar'}/> }\n    </form>\n  )\n}\n\nconst maskValues = (id, value) => {\n  // Remove everything that is not digit from formData specific fields\n  switch (id) {\n    case 'docNumber':\n    case 'securityCode':\n    case 'cardExpirationMonth':\n    case 'cardExpirationYear':\n    case 'cardNumber':\n      return value.replaceAll(/\\D/g, '');\n    default:\n      return value;\n  }\n}\n\nexport default Form;",["54","55"],"/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Button/Button.js",["56"],"/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Input/Input.js",["57"],"import React, { useState } from 'react';\nimport styles from './Input.module.css'\n\nconst Input = (props) => {\n  const isSensible = props.isSensible || false;\n\n  const extraAttr = {};\n  if(!isSensible){\n    extraAttr['name'] = props.name;\n    extraAttr['hidden'] = props.hidden;\n  }\n\n  const onChangeChildHandler = (e) => {\n    props.onChange(props.index, e);\n  }\n\n  let generatedInvalidMessage = null;\n  if(props.invalidMessage && props.invalidMessage !== ''){\n    generatedInvalidMessage = <p className={styles.validationMessage}>{props.invalidMessage}</p>\n  }\n\n  let input;\n    \n  if(props.type !== 'select'){\n    input = (<input\n      className={styles.input}\n      id={props.id}\n      type={props.type}\n      value={props.value}\n      data-checkout={props.dataCheckout}\n      placeholder={props.placeholder}\n      {...extraAttr}\n      onChange={onChangeChildHandler}\n    />)\n  }\n  \n  if(props.type === 'select'){\n    input = (<select\n      className={styles.input}\n      id={props.id}\n      value={props.value}\n      data-checkout={props.dataCheckout}\n      placeholder={props.placeholder}\n      {...extraAttr}\n      onChange={onChangeChildHandler}\n    >\n      {props.options && props.options.map(option => (\n        <option key={option.value} value={option.value}>{option.text}</option>\n      ))}\n    </select>)\n  }\n  \n  return (\n    <div className={props.hidden ? styles.hiddenGroup : styles.group}>\n      <label className={styles.label} htmlFor={props.id}>{props.labelName}</label>\n      {input}\n      {generatedInvalidMessage}\n    </div>\n  )\n}\n\nexport default Input;","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/ResponseMessage/ResponseMessage.js",["58"],"import React, { useState } from 'react';\nimport styles from './ResponseMessage.module.css';\n\nconst Input = (props) => {\n  return (\n    <div className={styles.group}>\n      <div className={styles.mainMessage}>\n        {props.status}\n      </div>\n      <div className={styles.descriptive}>\n        {props.message}\n      </div>\n    </div>\n  )\n}\n\nexport default Input;","/home/leto/Programming/Node/Projects/paymenttest/client/src/components/Spinner/Spinner.js",[],"/home/leto/Programming/Node/Projects/paymenttest/client/src/components/SuccessShow/SuccessShow.js",["59"],"import React from 'react';\nimport image from './O9IY2T0.jpg'\nimport styles from './SuccessShow.module.css';\n\nconst SuccessShow = (props) => {\n  return (\n    <>\n      <div className={styles.thanksMessage}>Thank you!</div>\n      <p className={styles.buildingMessage}>We are still building...</p>\n      <img className={styles.image} src={image} alt=\"Building Image\" />\n      <a className={styles.autorlink} href=\"https://br.freepik.com/vectors/fundo\">dooder logo</a>\n    </>\n  )\n}\n\nexport default SuccessShow;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"60","replacedBy":"66"},{"ruleId":"62","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":339,"column":6,"nodeType":"70","endLine":339,"endColumn":8,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":362,"column":6,"nodeType":"70","endLine":362,"endColumn":21,"suggestions":"73"},{"ruleId":"60","replacedBy":"74"},{"ruleId":"62","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":10,"column":7,"nodeType":"82","endLine":10,"endColumn":72},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],["83"],["84"],["83"],["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setReadyDocTypes'. Either include it or remove the dependency array.","ArrayExpression",["85"],"React Hook useEffect has missing dependencies: 'formData', 'formatDataToPost', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["86"],["83"],["84"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [setReadyDocTypes]",{"range":"91","text":"92"},"Update the dependencies array to be: [formData, formSubmitted, formatDataToPost, props]",{"range":"93","text":"94"},[9547,9549],"[setReadyDocTypes]",[10042,10057],"[formData, formSubmitted, formatDataToPost, props]"]